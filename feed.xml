<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://joohunhyun.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://joohunhyun.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-13T02:44:35+00:00</updated><id>https://joohunhyun.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">(ENG) VsCode Shortcut Keys(MacOS)</title><link href="https://joohunhyun.github.io/blog/2024/VsCode-Shortcut-Keys/" rel="alternate" type="text/html" title="(ENG) VsCode Shortcut Keys(MacOS)"/><published>2024-12-13T00:00:00+00:00</published><updated>2024-12-13T00:00:00+00:00</updated><id>https://joohunhyun.github.io/blog/2024/VsCode-Shortcut-Keys</id><content type="html" xml:base="https://joohunhyun.github.io/blog/2024/VsCode-Shortcut-Keys/"><![CDATA[<h2 id="visual-studio-code-shortcut-keysmacos"><strong>Visual Studio Code Shortcut Keys(MacOS)</strong></h2> <hr/> <p>💡익숙해진 단축키는 문서에서 삭제</p> <p>💡원본은 .md 파일에 존안</p> <hr/> <p><strong>Table of contents</strong></p> <ul> <li><a href="#visual-studio-code-shortcut-keysmacos"><strong>Visual Studio Code Shortcut Keys(MacOS)</strong></a> <ul> <li><a href="#vscode-shortcuts">VScode Shortcuts</a></li> <li><a href="#vscode-git-status">VSCode git status</a></li> </ul> </li> </ul> <p><br/></p> <h4 id="vscode-shortcuts">VScode Shortcuts</h4> <table> <thead> <tr> <th>Action</th> <th>Shortcut</th> </tr> </thead> <tbody> <tr> <td><strong>General</strong></td> <td> </td> </tr> <tr> <td>Open Command Palette</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + P</code></td> </tr> <tr> <td>Open Settings</td> <td><code class="language-plaintext highlighter-rouge">⌘ + ,</code></td> </tr> <tr> <td>Open Keyboard Shortcuts</td> <td><code class="language-plaintext highlighter-rouge">⌘ + K ⌘ + S</code></td> </tr> <tr> <td>Open Extensions View</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + X</code></td> </tr> <tr> <td>Show Integrated Terminal</td> <td><code class="language-plaintext highlighter-rouge">⌃ + \</code></td> </tr> <tr> <td>Close Window</td> <td><code class="language-plaintext highlighter-rouge">⌘ + W</code></td> </tr> <tr> <td>Quit VSCode</td> <td><code class="language-plaintext highlighter-rouge">⌘ + Q</code></td> </tr> <tr> <td> </td> <td> </td> </tr> <tr> <td><strong>GitHub Copilot</strong></td> <td> </td> </tr> <tr> <td>Accept Suggestion</td> <td><code class="language-plaintext highlighter-rouge">Tab</code></td> </tr> <tr> <td>Next Suggestion</td> <td><code class="language-plaintext highlighter-rouge">Option(Alt) + ]</code></td> </tr> <tr> <td>Previous Suggestion</td> <td><code class="language-plaintext highlighter-rouge">Option(Alt) + [</code></td> </tr> <tr> <td>Show Suggestions</td> <td><code class="language-plaintext highlighter-rouge">Ctrl + Enter</code></td> </tr> <tr> <td>Approve Suggestion</td> <td><code class="language-plaintext highlighter-rouge">Cmd + ←</code> or <code class="language-plaintext highlighter-rouge">Cmd + →</code></td> </tr> <tr> <td> </td> <td> </td> </tr> <tr> <td><strong>File Management</strong></td> <td> </td> </tr> <tr> <td>Open File</td> <td><code class="language-plaintext highlighter-rouge">⌘ + O</code></td> </tr> <tr> <td>Save File</td> <td><code class="language-plaintext highlighter-rouge">⌘ + S</code></td> </tr> <tr> <td>Save All Files</td> <td><code class="language-plaintext highlighter-rouge">⌥ + ⌘ + S</code></td> </tr> <tr> <td>Close Editor</td> <td><code class="language-plaintext highlighter-rouge">⌘ + W</code></td> </tr> <tr> <td>Reopen Closed Editor</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + T</code></td> </tr> <tr> <td>New File</td> <td><code class="language-plaintext highlighter-rouge">⌘ + N</code></td> </tr> <tr> <td>Open Recent Files</td> <td><code class="language-plaintext highlighter-rouge">⌘ + R</code></td> </tr> <tr> <td> </td> <td> </td> </tr> <tr> <td><strong>Editing</strong></td> <td> </td> </tr> <tr> <td>Cut Line</td> <td><code class="language-plaintext highlighter-rouge">⌘ + X</code></td> </tr> <tr> <td>Copy Line</td> <td><code class="language-plaintext highlighter-rouge">⌘ + C</code></td> </tr> <tr> <td>Paste</td> <td><code class="language-plaintext highlighter-rouge">⌘ + V</code></td> </tr> <tr> <td>Delete Line</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + K</code></td> </tr> <tr> <td>Duplicate Line</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌥ + ↓</code> or <code class="language-plaintext highlighter-rouge">⇧ + ⌥ + ↑</code></td> </tr> <tr> <td>Move Line Up/Down</td> <td><code class="language-plaintext highlighter-rouge">⌥ + ↑</code> or <code class="language-plaintext highlighter-rouge">⌥ + ↓</code></td> </tr> <tr> <td>Indent Line</td> <td><code class="language-plaintext highlighter-rouge">⌘ + ]</code></td> </tr> <tr> <td>Outdent Line</td> <td><code class="language-plaintext highlighter-rouge">⌘ + [</code></td> </tr> <tr> <td>Comment Line</td> <td><code class="language-plaintext highlighter-rouge">⌘ + /</code></td> </tr> <tr> <td>Add Multi-Cursor</td> <td><code class="language-plaintext highlighter-rouge">⌥ + Click</code></td> </tr> <tr> <td>Select All Occurrences</td> <td><code class="language-plaintext highlighter-rouge">⌘ + ⇧ + L</code></td> </tr> <tr> <td>Expand Selection</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌥ + →</code></td> </tr> <tr> <td>Shrink Selection</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌥ + ←</code></td> </tr> <tr> <td>Format Document</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌥ + F</code></td> </tr> <tr> <td>Go to Matching Bracket</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + \</code></td> </tr> <tr> <td> </td> <td> </td> </tr> <tr> <td><strong>Navigation</strong></td> <td> </td> </tr> <tr> <td>Go to File</td> <td><code class="language-plaintext highlighter-rouge">⌘ + P</code></td> </tr> <tr> <td>Go to Line</td> <td><code class="language-plaintext highlighter-rouge">⌃ + G</code></td> </tr> <tr> <td>Go to Definition</td> <td><code class="language-plaintext highlighter-rouge">F12</code></td> </tr> <tr> <td>Go to Implementation</td> <td><code class="language-plaintext highlighter-rouge">⌘ + F12</code></td> </tr> <tr> <td>Show References</td> <td><code class="language-plaintext highlighter-rouge">⇧ + F12</code></td> </tr> <tr> <td>Navigate Back</td> <td><code class="language-plaintext highlighter-rouge">⌃ + -</code></td> </tr> <tr> <td>Navigate Forward</td> <td><code class="language-plaintext highlighter-rouge">⌃ + ⇧ + -</code></td> </tr> <tr> <td> </td> <td> </td> </tr> <tr> <td><strong>Search and Replace</strong></td> <td> </td> </tr> <tr> <td>Find</td> <td><code class="language-plaintext highlighter-rouge">⌘ + F</code></td> </tr> <tr> <td>Find in Files</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + F</code></td> </tr> <tr> <td>Replace</td> <td><code class="language-plaintext highlighter-rouge">⌘ + ⌥ + F</code></td> </tr> <tr> <td>Replace in Files</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + H</code></td> </tr> <tr> <td> </td> <td> </td> </tr> <tr> <td><strong>Debugging</strong></td> <td> </td> </tr> <tr> <td>Start/Continue Debugging</td> <td><code class="language-plaintext highlighter-rouge">F5</code></td> </tr> <tr> <td>Step Over</td> <td><code class="language-plaintext highlighter-rouge">F10</code></td> </tr> <tr> <td>Step Into</td> <td><code class="language-plaintext highlighter-rouge">F11</code></td> </tr> <tr> <td>Step Out</td> <td><code class="language-plaintext highlighter-rouge">⇧ + F11</code></td> </tr> <tr> <td>Restart Debugging</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + F5</code></td> </tr> <tr> <td>Stop Debugging</td> <td><code class="language-plaintext highlighter-rouge">⇧ + F5</code></td> </tr> <tr> <td> </td> <td> </td> </tr> <tr> <td><strong>Terminal</strong></td> <td> </td> </tr> <tr> <td>Create New Terminal</td> <td><code class="language-plaintext highlighter-rouge">⌘ + ⇧ + </code>`</td> </tr> <tr> <td>Split Terminal</td> <td><code class="language-plaintext highlighter-rouge">⌘ + \</code>`</td> </tr> <tr> <td>Kill Terminal</td> <td><code class="language-plaintext highlighter-rouge">⌘ + K</code> (inside terminal)</td> </tr> <tr> <td>Navigate Terminals</td> <td><code class="language-plaintext highlighter-rouge">⌃ + ←</code> or <code class="language-plaintext highlighter-rouge">⌃ + →</code></td> </tr> <tr> <td> </td> <td> </td> </tr> <tr> <td><strong>Version Control</strong></td> <td> </td> </tr> <tr> <td>Open Source Control</td> <td><code class="language-plaintext highlighter-rouge">⇧ + ⌘ + G</code></td> </tr> <tr> <td>Commit Changes</td> <td><code class="language-plaintext highlighter-rouge">⌘ + Enter</code> (in source control)</td> </tr> </tbody> </table> <p><br/></p> <h4 id="vscode-git-status">VSCode git status</h4> <table> <thead> <tr> <th>Code</th> <th>Status</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>A</td> <td>Added</td> <td>This is a new file that has been added to the repository</td> </tr> <tr> <td>M</td> <td>Modified</td> <td>An existing file has been changed</td> </tr> <tr> <td>D</td> <td>Deleted</td> <td>A file has been deleted</td> </tr> <tr> <td>U</td> <td>Untracked</td> <td>The file is new or has been changed but has not been added to the repository yet</td> </tr> <tr> <td>C</td> <td>Conflict</td> <td>There is a conflict in the file</td> </tr> <tr> <td>R</td> <td>Renamed</td> <td>The file has been renamed</td> </tr> <tr> <td>S</td> <td>Submodule</td> <td>In repository exists another subrepository</td> </tr> <tr> <td>T</td> <td>Typechange</td> <td>The file changed from symlink to regular file, or vice versa</td> </tr> </tbody> </table> ]]></content><author><name></name></author><category term="study"/><category term="tools"/><summary type="html"><![CDATA[Visual Studio Code Shortcut Keys(MacOS)]]></summary></entry><entry><title type="html">(ENG) Brief History of AI</title><link href="https://joohunhyun.github.io/blog/2024/history-of-ML/" rel="alternate" type="text/html" title="(ENG) Brief History of AI"/><published>2024-12-13T00:00:00+00:00</published><updated>2024-12-13T00:00:00+00:00</updated><id>https://joohunhyun.github.io/blog/2024/history-of-ML</id><content type="html" xml:base="https://joohunhyun.github.io/blog/2024/history-of-ML/"><![CDATA[<h2 id="brief-history-of-ai"><strong>Brief History of AI</strong></h2> <hr/> <p><strong>Table of Contents</strong></p> <ul> <li><a href="#brief-history-of-ai"><strong>Brief History of AI</strong></a> <ul> <li><a href="#1940s1950s---early-foundations">1940s–1950s - Early Foundations</a></li> <li><a href="#1950s1960s---discovery-of-neural-networks">1950s–1960s - Discovery of Neural Networks</a></li> <li><a href="#1970s1980s---ais-first-winter인공지능의-첫-겨울--backpropagation역전파기법">1970s–1980s - AI’s First Winter(인공지능의 첫 겨울) \&amp; Backpropagation(역전파기법)</a></li> <li><a href="#1980s1990s---sequence-processing-and-memory">1980s–1990s - Sequence Processing and Memory</a></li> <li><a href="#1997---long-short-term-memorylstm-hochreiter--schmidhuber">1997 - Long Short-Term Memory(LSTM) (Hochreiter \&amp; Schmidhuber)</a></li> <li><a href="#1980s1990s---visual-recognition-and-spatial-data">1980s–1990s - Visual Recognition and Spatial Data</a></li> <li><a href="#2012---deep-learning-revolution">2012 - Deep Learning Revolution</a></li> <li><a href="#2014---generative-adversarial-networksgan-goodfellow">2014 - Generative Adversarial Networks(GAN) (Goodfellow)</a></li> <li><a href="#2017---attention-mechanisms-and-transformers-vaswani-et-al">2017 - Attention Mechanisms and Transformers (Vaswani et al.)</a></li> <li><a href="#2020s---multi-modal-ai-and-real-time-applications">2020s - Multi-Modal AI and Real-Time Applications</a></li> <li><a href="#tldr">TL;DR</a></li> </ul> </li> </ul> <hr/> <h4 id="1940s1950s---early-foundations">1940s–1950s - Early Foundations</h4> <p>Discovery: Boolean logic and the Turing Test</p> <p>Problem: How can we formalize reasoning and test machine intelligence?</p> <p>Solution: Alan Turing introduced the concept of a machine capable of computation (Turing Machine) and proposed the Turing Test as a way to determine if a machine exhibits intelligent behavior.</p> <p><br/></p> <h4 id="1950s1960s---discovery-of-neural-networks">1950s–1960s - Discovery of Neural Networks</h4> <p>Discovery: Perceptron (1958, Frank Rosenblatt)</p> <p>Problem: How can we mimic the human brain’s ability to learn patterns?</p> <p>Solution: The perceptron, a simple single-layer neural network, was developed to classify data linearly by adjusting weights using feedback. However, it was unable to solve non-linear problems, such as XOR.</p> <p><br/></p> <h4 id="1970s1980s---ais-first-winter인공지능의-첫-겨울--backpropagation역전파기법">1970s–1980s - AI’s First Winter(인공지능의 첫 겨울) &amp; Backpropagation(역전파기법)</h4> <p>Discovery: Backpropagation (1986, Rumelhart, Hinton, Williams)</p> <p>Problem: How can multi-layer neural networks be efficiently trained?</p> <p>Solution: Backpropagation introduced a systematic way to compute gradients and update weights in deep networks using the chain rule, which is the cornerstone of deep learning.This allowed to solve non-linear problems.Applications suggested during that period included image recognition and character classification but were limited by computational power and data availability.</p> <p><br/></p> <h4 id="1980s1990s---sequence-processing-and-memory">1980s–1990s - Sequence Processing and Memory</h4> <p>Discovery: Recurrent Neural Networks(RNN) (1986, Rumelhart &amp; McClelland)</p> <p>Problem: How can sequential data be modeled and retain context from prior inputs?</p> <p>Solution: RNNs introduced a feedback loop where outputs from previous steps are fed back as inputs, allowing networks to maintain a “memory” over time.</p> <p>Limitations: RNNs faced vanishing gradient issues, making them ineffective for long sequences -&gt; LSTM was introduced to resolve this issue.</p> <p><br/></p> <h4 id="1997---long-short-term-memorylstm-hochreiter--schmidhuber">1997 - Long Short-Term Memory(LSTM) (Hochreiter &amp; Schmidhuber)</h4> <p>Problem: How can we learn and retain long-term dependencies in sequences</p> <p>Solution: LSTMs introduced gated cells to control the flow of information, solving vanishing gradient problems. Applications include speech recognition and language translation.</p> <p><br/></p> <h4 id="1980s1990s---visual-recognition-and-spatial-data">1980s–1990s - Visual Recognition and Spatial Data</h4> <p>Discovery: Convolutional Neural Networks (CNNs, 1989, LeCun)</p> <p>Problem: How to efficiently process and recognize spatially structured data like images.</p> <p>Solution: CNNs use convolutional layers to detect patterns such as edges and textures by learning spatial hierarchies. Pooling layers reduce dimensionality while preserving critical information.</p> <p>Applications: Handwritten digit recognition (e.g., MNIST dataset) and later extended to more complex tasks like object detection.</p> <p><br/></p> <h4 id="2012---deep-learning-revolution">2012 - Deep Learning Revolution</h4> <p>Discovery: Deep CNNs and AlexNet (2012, Krizhevsky, Sutskever, Hinton)</p> <p>Problem: How to achieve state-of-the-art(SOTA) accuracy in image recognition.</p> <p>Solution: AlexNet leveraged deeper architectures, ReLU activations, and GPUs for training, achieving a breakthrough in the ImageNet competition. (Previous SOTA classification : 74% -&gt; Alexnet <code class="language-plaintext highlighter-rouge">84.69%</code>)</p> <p>Applications: Facial recognition, autonomous vehicles, and medical imaging.</p> <p><br/></p> <h4 id="2014---generative-adversarial-networksgan-goodfellow">2014 - Generative Adversarial Networks(GAN) (Goodfellow)</h4> <p>Problem: How can we generate new output data that resembles an input dataset?</p> <p>Solution: GANs use a generator and discriminator in a competitive framework, enabling applications like image synthesis and style transfer.</p> <p><br/></p> <h4 id="2017---attention-mechanisms-and-transformers-vaswani-et-al">2017 - Attention Mechanisms and Transformers (Vaswani et al.)</h4> <p>Problem: How can we handle long-term dependencies and parallelize(병렬화) sequence processing?</p> <p>Solution: The attention mechanism learns relationships between all inputs simultaneously, eliminating sequential constraints. Transformers like BERT and GPT revolutionized natural language processing (NLP).</p> <p>Applications: Machine translation, summarization, and chatbots.</p> <p><br/></p> <h4 id="2020s---multi-modal-ai-and-real-time-applications">2020s - Multi-Modal AI and Real-Time Applications</h4> <p>Discovery: Multi-Modal Models (e.g., CLIP, DALL-E)</p> <p>Problem: How can we unify processing across different modalities like text, images, and audio?</p> <p>Solution: Pretraining large-scale models that align multiple data types, enabling applications in creative AI and real-time analysis.</p> <p><br/></p> <h4 id="tldr">TL;DR</h4> <ul> <li>Backpropagation solved problem of non-linearity.</li> <li>RNNs/LSTMs enabled handling sequential data.</li> <li>CNNs revolutionized image processing.</li> <li>Transformers led to breakthroughs in NLP and multi-modal AI.</li> </ul>]]></content><author><name></name></author><category term="study"/><category term="ML,"/><category term="DL"/><summary type="html"><![CDATA[Brief History of AI]]></summary></entry><entry><title type="html">(ENG) Backpropagation</title><link href="https://joohunhyun.github.io/blog/2024/backpropagation/" rel="alternate" type="text/html" title="(ENG) Backpropagation"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://joohunhyun.github.io/blog/2024/backpropagation</id><content type="html" xml:base="https://joohunhyun.github.io/blog/2024/backpropagation/"><![CDATA[<h2 id="backpropagation"><strong>Backpropagation</strong></h2> <p><a href="https://www.youtube.com/watch?v=tIeHLnjs5U8">Video Refrence</a></p> <h4 id="before-delving-in">Before delving in..</h4> <ol> <li>Activation function :</li> </ol> \[f(z) = 1/1+e\] <h4 id="what-is-backpropagation">What is Backpropagation?</h4>]]></content><author><name></name></author><category term="study"/><category term="backpropagation,"/><category term="DL"/><summary type="html"><![CDATA[backpropagation]]></summary></entry><entry><title type="html">(KOR) 마크다운 문법</title><link href="https://joohunhyun.github.io/blog/2024/markdown-syntax/" rel="alternate" type="text/html" title="(KOR) 마크다운 문법"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://joohunhyun.github.io/blog/2024/markdown-syntax</id><content type="html" xml:base="https://joohunhyun.github.io/blog/2024/markdown-syntax/"><![CDATA[<h2 id="마크다운-문법-총정리">마크다운 문법 총정리</h2> <p>‘<a href="https://www.markdownguide.org">공식 문서</a>’</p> <h4 id="문단">문단</h4> <ul> <li>줄바꿈을 두번</li> <li>줄 끝에 역슬래시</li> </ul> <h4 id="목록">목록</h4> <ul> <li>순서가 없는 목록 (bullet points) <ul> <li>(-) 또는 (*) 사용</li> </ul> </li> <li>순서가 있는 목록 <ul> <li>(1.abcd) -&gt; 이런식으로 작성하나, 숫자는 반드시 맞춰서 쓸 필요는 없다.</li> </ul> </li> </ul> <h4 id="글자-모양">글자 모양</h4> <ul> <li>bold : wrap with ** **</li> <li>italicize : wrap with * *</li> </ul> <h4 id="코드블럭">코드블럭</h4> <ul> <li>(```) 사용</li> <li>맥 환경에서는 키보드가 <strong>영어</strong>로 설정되어 있어야 백틱(`)을 사용할 수 있다</li> </ul> <h4 id="블럭">블럭</h4> <ul> <li>(`) 사용</li> <li>노션의 CMD+E 기능과 동일</li> </ul> <h4 id="링크">링크</h4> <p>-<code class="language-plaintext highlighter-rouge">[link_description](url)</code> 형식으로 작성</p> <h4 id="가로줄">가로줄</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>***
OR
- - -
</code></pre></div></div>]]></content><author><name></name></author><category term="study"/><category term="markdown,"/><category term="마크다운,"/><category term="tools"/><summary type="html"><![CDATA[마크다운 문법]]></summary></entry><entry><title type="html">(ENG) Github Commit Message Conventions</title><link href="https://joohunhyun.github.io/blog/2024/github-conventions-copy/" rel="alternate" type="text/html" title="(ENG) Github Commit Message Conventions"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://joohunhyun.github.io/blog/2024/github-conventions%20copy</id><content type="html" xml:base="https://joohunhyun.github.io/blog/2024/github-conventions-copy/"><![CDATA[<h4 id="commit-message-guidelines"><strong>Commit Message Guidelines</strong></h4> <p>Commit messages should follow the following format : ``` Activity: Commit Message <br/> ``’</p> <ul> <li>Activities <ul> <li><code class="language-plaintext highlighter-rouge">feat</code>: only for new features</li> <li><code class="language-plaintext highlighter-rouge">doc</code>: changes to document or comment</li> <li><code class="language-plaintext highlighter-rouge">mod</code>: modify existing feature</li> <li><code class="language-plaintext highlighter-rouge">fix</code>: fix an error or issue</li> <li><code class="language-plaintext highlighter-rouge">rfc</code>: refactor code</li> <li><code class="language-plaintext highlighter-rouge">add</code>: add new file or directory</li> <li><code class="language-plaintext highlighter-rouge">rmv</code>: remove existing file or directory</li> <li><code class="language-plaintext highlighter-rouge">chore</code> : 빌드 수정, 패키지 매니저 설정, 운영 코드 변경이 없는 경우 등</li> </ul> </li> <li>Example <ul> <li><code class="language-plaintext highlighter-rouge">int: initial commit</code></li> <li><code class="language-plaintext highlighter-rouge">add: prettier and eslint</code></li> <li><code class="language-plaintext highlighter-rouge">rfc: refactoring code by prettier</code></li> </ul> </li> </ul> <p>feat : 새로운 기능 추가 fix : 버그 수정 docs : 문서 내용 변경 style : 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우 등 refactor : 코드 리팩토링 test : 테스트 코드 작성 chore : 빌드 수정, 패키지 매니저 설정, 운영 코드 변경이 없는 경우 등</p>]]></content><author><name></name></author><category term="study"/><category term="tools,"/><category term="github,"/><category term="git"/><summary type="html"><![CDATA[gitub commmit message convetions]]></summary></entry><entry><title type="html">(KOR) 논문 리뷰 방법론</title><link href="https://joohunhyun.github.io/blog/2024/journal-reading/" rel="alternate" type="text/html" title="(KOR) 논문 리뷰 방법론"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://joohunhyun.github.io/blog/2024/journal-reading</id><content type="html" xml:base="https://joohunhyun.github.io/blog/2024/journal-reading/"><![CDATA[<aside> Lecture notes from Stanford CS230 </aside> <p>TL;DR</p> <h4 id="andrew-ngs-method">Andrew Ng’s method</h4> <p>논문 리딩 방법론</p> <ol> <li>Title/abstract/figures를 읽어본다</li> <li>Intro/conclusion/figures를 읽고, 나머지는 훑어본다</li> <li>수식은 넘어가거나 훑어본다</li> <li>논문을 처음부터 끝까지 읽어본다 (이해가 안되는 부분은 넘어간다)</li> </ol> <p>&lt;논문을 읽은 후에 해야할 질문 4가지&gt;</p> <ul> <li>What did the author try to accomplish?</li> <li>What were key elements?</li> <li>What can you use yourself?</li> <li>What other references do you want to follow?</li> </ul> <h4 id="andrew-ng---논문-읽는-방법">Andrew Ng - 논문 읽는 방법</h4> <ol> <li>정보 수집 방법</li> </ol> <ul> <li>트위터 (現 x)</li> <li>ML 서브레딧  <strong>(<a href="https://www.reddit.com/r/MachineLearning/">https://www.reddit.com/r/MachineLearning/)</a></strong></li> <li><strong>ML/DL 컨퍼런스 : <a href="https://nips.cc/">NIPS</a>/<a href="https://icml.cc/">ICML</a>/<a href="https://iclr.cc/">ICLR</a></strong></li> </ul> <ol> <li>어떻게 읽을 것인가?</li> </ol> <p>💡많은 양의 논문을 읽어야할 때만 해당됨. 그렇지 않다면 정독하는 것을 추천한다.</p> <ol> <li>Title/abstract/figures를 읽어본다</li> <li>Intro/conclusion/figures를 읽고, 나머지는 훑어본다 <ol> <li>related work는 과감하게 넘어간다. 대개의 경우 논문의 저자가 지도교수님 등의 논문을 존중의 의미에서 언급하는 경우가 많다.</li> </ol> </li> <li>수식은 넘어가거나 훑어본다</li> <li>논문을 처음부터 끝까지 읽어본다 (이해가 안되는 부분은 넘어간다)</li> </ol> <h2 id="3-practical-questions">3. Practical questions</h2> <ul> <li>What did the author try to accomplish?</li> <li>What were key elements?</li> <li>What can you use yourself?</li> <li>What other references do you want to follow?</li> </ul> <h2 id="4-코드-연습">4. 코드 연습</h2> <ol> <li> <p>오픈소스를 다운받아서 실행해본다.</p> </li> <li> <p>처음부터 직접 구현해본다.</p> </li> </ol> <h2 id="5-커리어-조언---채용-담당자가-중요시하는-요소">5. 커리어 조언 - 채용 담당자가 중요시하는 요소</h2> <ul> <li>ML 관련 전공지식</li> <li>코딩 능력</li> <li>Meaningful work (의미있는 프로젝트)</li> <li>Open source (github에 코드 게시)</li> <li>인턴쉽</li> </ul>]]></content><author><name></name></author><category term="study"/><category term="papers,"/><category term="논문리뷰"/><summary type="html"><![CDATA[논문 리뷰 방법]]></summary></entry></feed>